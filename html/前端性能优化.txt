1.CRP（关键渲染路径Critical Rendering Path）优化

关键渲染路径是浏览器将 HTML、CSS、JavaScript 转换为在屏幕上呈现的像素内容所经历的一系列步骤。也就是我们刚刚提到的的的浏览器渲染流程。

为尽快完成首次渲染，我们需要最大限度减小以下三种可变因素:


* 关键资源的数量: 可能阻止网页首次渲染的资源。
* 关键路径长度: 获取所有关键资源所需的往返次数或总时间。
* 关键字节: 实现网页首次渲染所需的总字节数，等同于所有关键资源传送文件大小的总和。


2. 优化 DOM

	* 删除不必要的代码和注释包括空格，尽量做到最小化文件。
	* 可以利用 GZIP 压缩文件。
	* 结合 HTTP 缓存文件。

3. 优化 CSSOM

	* 减少关键 CSS 元素数量
	* 当我们声明样式表时，请密切关注媒体查询的类型，它们极大地影响了 CRP 的性能 。

4. 优化 JavaScript

	* async: 当我们在 script 标记添加 async 属性以后，浏览器遇到这个 script 标记时会继续解析 DOM，同时脚本也不会被 CSSOM 阻止，即不会阻止 CRP。
	* defer: 与 async 的区别在于，脚本需要等到文档解析后（ DOMContentLoaded 事件前）执行，而 async 允许脚本在文档解析时位于后台运行（两者下载的过程不会阻塞 DOM，但执行会）。
	* 当我们的脚本不会修改 DOM 或 CSSOM 时，推荐使用 async 。
	* 预加载 ―― preload & prefetch 。
	* DNS 预解析 ―― dns-prefetch 。

5. 减少浏览器回流(Reflow)和重绘(Repaint)
  	* 回流: 当 Render Tree 中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。
  	* 重绘: 当页面中元素样式的改变并不影响它在文档流中的位置时（例如：color、background-color、visibility 等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。



6. 图片懒加载、雪碧图、多用事件委托































