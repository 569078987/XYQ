1. set, map
 a. set只有值没键
 b.Weak Map 的用法与局限性 (Weak Map,键只能是对象)
当决定是要使用 Weak Map 还是使用正规 Map 时，首要考虑因素在于你是否只想使用对象类
型的键。如果你打算这么做，那么最好的选择就是 Weak Map 。因为它能确保额外数据在不
再可用后被销毁，从而能优化内存使用并规避内存泄漏。
要记住 Weak Map 只为它们的内容提供了很小的可见度，因此你不能使用 forEach() 方法、
size 属性或 clear() 方法来管理其中的项。如果你确实需要一些检测功能，那么正规 Map
会是更好的选择，只是一定要确保留意内存的使用		



2. obj.entries()   .value()  .keys()


3.https://segmentfault.com/a/1190000002904199
类的 prototype 属性和 __proto__ 属性
一个实例化对象会有一个 __proto__ 指向构造函数的 prototype 属性。在 class 中。同时具有 __proto__ 和 prototype 两个属性，存在两条继承链。
function Foo(){};
var foo = new Foo();
console.log(foo.__proto__ === Foo.prototype); // ture
===>foo.__proto__ = Foo.prototype     Foo.prototype.__proto__ = Object.prototype


子类的 __proto__ 属性，表示构造函数的继承，总是指向父类。
子类的 prototype 的 __proto__ 属性表示方法的继承，总是指向父类的 prototype 属性。